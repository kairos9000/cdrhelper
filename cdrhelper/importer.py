"""
Tools to import the fake call detail records.

importNodes() - line by line import using raw attribute file (networkx graph)
importEdges() - line by line import using raw call files (networkx graph)
importAttr() - pandas import using raw attribute file (pandas dataframe)
importCalls() - pandas import using raw call files (pandas dataframe)
"""

import networkx as nx
import pandas as pd
import numpy as np

def importNodes(afile):
    """Uses the attribute file to return a node-only graph object.
    
    Using raw attribute files, will create a nx.Graph() object with no edges.
    Import is performed line-by-line (vs pandas import). This new object will
    contain attribute information as well as a discretized version of age.
    
    Parameters:
    -----------
    afile : path to attribute file
    """
    G = nx.Graph()
    
    for line in open(afile):
        acolumns = line.rstrip().split(';')
        i = int(acolumns[0])
        
        post = None
        if (acolumns[1] != ' ' and acolumns[1] != ''):
            post = int(acolumns[1]) 
        
        age = None
        if (acolumns[3]!=' ' and acolumns[3]!=''):
            age = int(acolumns[3]) 

        male = None
        if (acolumns[2]!='' and acolumns[2]!=' '):
            male = 1 if acolumns[2]=="M" else 0     # note ternary operation
        
        # age discretization
        if (age < 20) and (age is not None):
            agecat = 0
        elif (age >= 20) and (age < 30):
            agecat = 20
        elif (age >= 30) and (age < 40):
            agecat = 30
        elif (age >= 40) and (age < 50):
            agecat = 40
        elif (age >= 50) and (age < 60):
            agecat = 50
        elif (age >= 60):
            agecat = 60

        G.add_node(i, post = post, age = age, male = male, agecat = agecat)

    return(G)

def importEdges(cfile, G, directed = False):
    """Create a directed or undirected network using line-by-line import. 
    
    Using the raw call data and node-only graph, make a directed network line 
    by line (as opposed to a pandas dataframe import).
    
    Parameters:
    -----------
    cfile : path to call file
    G : a node-only network object generated by importNodes()
    directed : a boolean indicating if a DiGraph or a Graph should be returned.
    """
    if (directed == True):
        G = nx.DiGraph(G)

    for line in open(cfile):
        ccolumns = line.rstrip().split(';')
        # ccolumns[0] is the date
        i       = int(ccolumns[1])
        j       = int(ccolumns[2])
        calls   = int(ccolumns[3])
        mins    = float(ccolumns[4])
        sms     = int(ccolumns[5])
        mms     = int(ccolumns[6])
        
        if G.has_edge(i, j):
            G[i][j]['calls'] += calls
            G[i][j]['min']   += mins
            G[i][j]['sms']   += sms
            G[i][j]['mms']   += mms
        else:
            G.add_edge(i, j, calls = calls, min = mins, sms = sms, mms = mms)
    return G

def importAttr(afile):
    """Returns a pandas dataframe of the raw attribute file. 
    
    NOTE: Also categorizes age (in same way as line-by-line import).
    
    Parameters:
    -----------
    afile : path to the raw attribute file
    """
    df_attr = pd.read_csv(afile, sep = ';', na_values = " ", 
            names = ['A_num', 'postcode', 'gender', 'age'])
    ##  Discretize age into categories in the attribute file.
    df_attr['agecat'] = pd.cut(df_attr.age, [0, 20, 30, 40, 50, 60, np.inf], 
                        right = False, 
                        labels=[0, 20, 30, 40, 50, 60])
    df_attr.index = df_attr.A_num
    return(df_attr)

def importCalls(cfile):
    """Imports the call data. Returns it as a pandas dataframe.
    
    Parameters:
    -----------
    cfile : path to the raw call file
    """
    df_call = pd.read_csv(cfile, sep = ';', na_values = " ",
            names = ['date', 'A_num', 'B_num', 'calls', 'min', 'sms', 'mms'])
    return(df_call)

